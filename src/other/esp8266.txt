#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>
#include <DHT.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// WiFi credentials
#define WIFI_SSID "Cherry Mobile 4G"
#define WIFI_PASSWORD "101111AdEvA1211"

// Firebase configuration
#define FIREBASE_HOST "ecomist-3082f-default-rtdb.asia-southeast1.firebasedatabase.app"
#define FIREBASE_AUTH "C1KiaCZnL7SlMmntNgOVdNsdk1QJLvhJCaAdLqkP"

// Sensor Pins
#define DHTPIN D8
#define DHTTYPE DHT22
#define TRIGGER_PIN D5
#define ECHO_PIN D6
#define PH_PIN A0
#define TDS_PIN A0
#define ONE_WIRE_BUS D7

// Sensor objects
DHT dht(DHTPIN, DHTTYPE);
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature ds18b20(&oneWire);
FirebaseData fbdo;
FirebaseConfig config;

// Threshold struct with default values
struct Thresholds {
  float humidity_min = 50, humidity_max = 70;
  float air_temp_min = 18, air_temp_max = 25;
  float water_temp_min = 18, water_temp_max = 22;
  float water_level_min = 10;
  float ph_min = 5.5, ph_max = 6.5;
  float tds_min = 560, tds_max = 840;
} thresholds;

// Sensor values
float humidity, airTemp, waterTemp, distance, ph, tds;
unsigned long previousMillis = 0;
const long interval = 5000;  // Update every 5 seconds

void setup() {
  Serial.begin(115200);

  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  dht.begin();
  ds18b20.begin();

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nConnected to WiFi");

  config.database_url = FIREBASE_HOST;
  config.signer.tokens.legacy_token = FIREBASE_AUTH;
  Firebase.begin(&config, nullptr);
  Firebase.reconnectWiFi(true);

  fetchThresholds(); // Fetch thresholds on startup
}

void loop() {
  unsigned long currentMillis = millis();
  
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    readDHT22();
    readUltrasonic();
    readDS18B20();
    readPH();
    readTDS();
    
    sendToFirebase();
    fetchThresholds(); // Refresh thresholds periodically
  }
}

void readDHT22() {
  humidity = dht.readHumidity();
  airTemp = dht.readTemperature();

  if (isnan(humidity) || isnan(airTemp)) {
    Serial.println("DHT22 reading error");
    return;
  }
}

void readUltrasonic() {
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH);
  distance = duration * 0.034 / 2;
}

void readDS18B20() {
  ds18b20.requestTemperatures();
  waterTemp = ds18b20.getTempCByIndex(0);
}

void readPH() {
  int samples = 10;
  float voltage = 0;

  for (int i = 0; i < samples; i++) {
    voltage += analogRead(PH_PIN) * (5.0 / 1024.0);
    delay(10);
  }
  voltage /= samples;

  ph = 7.0 + ((2.5 - voltage) / ((2.5 - 3.1) / 3.0));
}

void readTDS() {
  float voltage = analogRead(TDS_PIN) * 5.0 / 1024.0;
  float compensationVoltage = voltage / (1.0 + 0.02 * (waterTemp - 25.0));
  tds = (133.42 * pow(compensationVoltage, 3) - 255.86 * pow(compensationVoltage, 2) + 857.39 * compensationVoltage);
}

void sendToFirebase() {
  FirebaseJson json;
  json.set("humidity", humidity);
  json.set("air_temperature", airTemp);
  json.set("water_temperature", waterTemp);
  json.set("water_level", distance);
  json.set("ph", ph);
  json.set("tds", tds);

  if (Firebase.pushJSON(fbdo, "/sensor_data", json)) {
    Serial.println("Data sent successfully");
  } else {
    Serial.println("Failed to send data: " + fbdo.errorReason());
  }
}

void fetchThresholds() {
  if (Firebase.getJSON(fbdo, "/thresholds")) {
    FirebaseJson &json = fbdo.jsonObject();
    FirebaseJsonData data;

    if (json.get(data, "humidity_min")) thresholds.humidity_min = data.to<float>();
    if (json.get(data, "humidity_max")) thresholds.humidity_max = data.to<float>();
    if (json.get(data, "air_temp_min")) thresholds.air_temp_min = data.to<float>();
    if (json.get(data, "air_temp_max")) thresholds.air_temp_max = data.to<float>();
    if (json.get(data, "water_temp_min")) thresholds.water_temp_min = data.to<float>();
    if (json.get(data, "water_temp_max")) thresholds.water_temp_max = data.to<float>();
    if (json.get(data, "water_level_min")) thresholds.water_level_min = data.to<float>();
    if (json.get(data, "ph_min")) thresholds.ph_min = data.to<float>();
    if (json.get(data, "ph_max")) thresholds.ph_max = data.to<float>();
    if (json.get(data, "tds_min")) thresholds.tds_min = data.to<float>();
    if (json.get(data, "tds_max")) thresholds.tds_max = data.to<float>();

    Serial.println("Thresholds updated from Firebase!");
  } else {
    Serial.println("⚠️ Using default thresholds.");
  }
}
