rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ─── Helper Functions ─────────────────────────────
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.role == 'admin';
    }

    function isValidTransaction() {
      let data = request.resource.data;
      return data.keys().hasAll(['amount', 'type', 'category', 'date', 'notes']) &&
             (data.type == 'income' || data.type == 'expense') &&
             data.amount is number && data.amount > 0 &&
             data.date is timestamp;
    }

    // ─── Users Collection ─────────────────────────────
    match /users/{userId} {
  allow read: if isAuthenticated();
  
  allow create: if isAuthenticated() && isOwner(userId) &&
    request.resource.data.keys().hasOnly([
      'username', 'email', 'profileImageUrl', 'completeName', 'birthday', 'cellphone',
      'gender', 'address', 'role', 'status', 'createdAt', 'emailVerified',
      'authProvider', 'loginCount'
    ]) &&
    request.resource.data.username is string &&
    request.resource.data.email is string &&
    request.resource.data.profileImageUrl is string &&
    request.resource.data.completeName is string &&
    request.resource.data.birthday is string && // stored as string (ISO) from your frontend
    request.resource.data.cellphone is string &&
    request.resource.data.gender in ['male', 'female', 'other'] &&
    request.resource.data.address is string &&
    request.resource.data.role in ['user', 'admin'] &&
    request.resource.data.status == 'active' &&
    request.resource.data.createdAt is string &&
    request.resource.data.emailVerified is bool &&
    request.resource.data.authProvider in ['email', 'google'] &&
    request.resource.data.loginCount is int;

  allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());


      // ─── Transactions Subcollection ───────────────
      match /transactions/{transactionId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow create, update: if isAuthenticated() && (isOwner(userId) || isAdmin()) && isValidTransaction();
        allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
      }

      // ─── Budgets Subcollection ────────────────────
      match /budgets/{monthId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // ─── Contact Messages ────────────────────────────
    match /contact_messages/{messageId} {
      allow create: if request.resource.data.keys().hasAll(['name', 'email', 'message', 'timestamp']) &&
                    request.resource.data.name is string &&
                    request.resource.data.email is string &&
                    request.resource.data.message is string &&
                    request.resource.data.timestamp is timestamp;
      allow read, delete: if isAuthenticated() && isAdmin();
    }
    
    // ─── Typing Status ───────────────────────────────
    match /typing/{typingId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // ─── Online Status ───────────────────────────────
    match /status/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // ─── Analysis History ────────────────────────────
    match /analysisHistory/{documentId} {
      allow read: if isAuthenticated() && (
  resource.data.userId == request.auth.uid || isAdmin()
);
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll([
          'userId', 'imageUrl', 'prediction', 'confidence',
          'classProbabilities', 'recommendations', 'createdAt'
        ]) &&
        request.resource.data.userId is string &&
        request.resource.data.imageUrl is string &&
        request.resource.data.prediction is string &&
        request.resource.data.confidence is number &&
        request.resource.data.classProbabilities is map &&
        (request.resource.data.recommendations is list || request.resource.data.recommendations is map) &&
        request.resource.data.createdAt is timestamp;
      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }
    
        // ─── Comparisons (Two-Image Comparison History) ────────────────────────────
    match /comparisons/{comparisonId} {
      allow read: if isAuthenticated() && (
  resource.data.userId == request.auth.uid || isAdmin()
);

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.keys().hasAll([
          'userId', 'imageUrl1', 'imageUrl2',
          'prediction1', 'prediction2',
          'confidence1', 'confidence2',
          'classProbabilities1', 'classProbabilities2',
          'progressionDetected', 'createdAt'
        ]) &&
        request.resource.data.userId is string &&
        request.resource.data.imageUrl1 is string &&
        request.resource.data.imageUrl2 is string &&
        request.resource.data.prediction1 is string &&
        request.resource.data.prediction2 is string &&
        request.resource.data.confidence1 is number &&
        request.resource.data.confidence2 is number &&
        request.resource.data.classProbabilities1 is map &&
        request.resource.data.classProbabilities2 is map &&
        request.resource.data.progressionDetected is bool &&
        request.resource.data.createdAt is timestamp;

      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }


    // ─── Attachments ─────────────────────────────────
    match /attachments/{attachmentId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // ─── Feedback ────────────────────────────────────
   match /feedback/{feedbackId} {
  allow read: if isAuthenticated() && (
    resource.data.userId == request.auth.uid || isAdmin()
  );
  allow delete: if isAuthenticated() && isAdmin();
  allow create: if isAuthenticated() &&
    request.resource.data.keys().hasAll(['type', 'message', 'userId', 'timestamp']) &&
    request.resource.data.type in ['suggestion', 'bug', 'question', 'other'] &&
    request.resource.data.message.size() > 0 &&
    request.resource.data.userId == request.auth.uid &&
    request.resource.data.timestamp is timestamp;
}



    // ─── System Logs ─────────────────────────────────
    match /system_logs/{logId} {
  allow read: if isAuthenticated() && resource.data.user == request.auth.token.email;
  allow create: if isAuthenticated() &&
    request.resource.data.keys().hasAll(['type', 'message', 'timestamp', 'user', 'userRole']) &&
    request.resource.data.type in ['info', 'warning', 'error', 'success'] &&
    request.resource.data.message.size() > 0 &&
    request.resource.data.timestamp is timestamp &&
    request.resource.data.user.size() > 0 &&
    request.resource.data.userRole in ['admin', 'user'];
  allow delete: if isAuthenticated() && isAdmin();
}


    // ─── System Config (Admin only) ──────────────────
    match /system/{document=**} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    // ─── Public Data ─────────────────────────────────
    match /public/{document=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isAdmin();
    }

    // ─── IoT Sensor Data ─────────────────────────────
    match /sensor_data/{deviceId} {
      allow read, write: if isAuthenticated();
    }
    
    // ─── Tawk Logs ───────────────────────────────────
    match /tawkLogs/{docId} {
      allow create: if isAuthenticated() &&
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['user', 'admin']; // Allow both 'user' and 'admin' roles
    }
    // ─── Messages ────────────────────────────────────
     function isSender(message) {
      return request.auth != null && request.auth.uid == message.userId;
    }

    function isOnlyReadOrReactionUpdate() {
      let allowedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return allowedKeys.hasOnly(['readBy', 'reactions', 'replies']);
    }

    function isReadByUpdate() {
      return request.resource.data.readBy != null &&
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
    }

    function isReactionUpdate() {
      return request.resource.data.reactions != null &&
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']);
    }

    function isReplyUpdate() {
      return request.resource.data.replies != null &&
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replies']);
    }

    // ─── Messages Collection ─────────────────────────
    match /messages/{messageId} {

      // Read: Any authenticated user can read messages
      allow read: if isAuthenticated();

      // Create: Authenticated users can create their own message
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.text is string &&
        request.resource.data.timestamp is timestamp;

      // Update: 
      allow update: if isAuthenticated() && (
        
        // Sender can edit their own message (text, fileUrl, edited flag, etc.)
        isSender(resource.data)

        // Other users can update readBy field
        || (isReadByUpdate() && !isSender(resource.data))

        // Other users can update reactions only
        || (isReactionUpdate() && !isSender(resource.data))

        // Other users can update replies only
        || (isReplyUpdate() && !isSender(resource.data))
      );

      // Delete: Only the sender can delete their own message
      allow delete: if isSender(resource.data);
    }
    match /mail_senders/{uid} {
  allow read, write: if request.auth != null && request.auth.uid == uid;
}

match /smtp_logs/{uid}/logs/{logId} {
  allow read, write: if request.auth != null && request.auth.uid == uid;
}
match /contact_logs/{logId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
     match /auth_logs/{logId} {
      allow create: if request.auth != null; // any authenticated user can log events
      allow read: if isAdmin() || resource.data.uid == request.auth.uid;
    }
  }
}
